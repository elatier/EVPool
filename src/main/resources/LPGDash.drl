package uk.ac.imperial.evpool.rules

import java.util.List
import java.util.Map
import java.lang.Math
import java.lang.Double
import uk.ac.imperial.presage2.core.Action
import uk.ac.imperial.presage2.rules.facts.Agent
import uk.ac.imperial.evpool.RoundType
import uk.ac.imperial.evpool.actions.*
import uk.ac.imperial.evpool.facts.*
import uk.ac.imperial.presage2.core.db.StorageService
import uk.ac.imperial.presage2.core.util.random.Random

global org.apache.log4j.Logger logger
global uk.ac.imperial.presage2.core.db.StorageService storage



declare Round
	@role( event )
end

declare Provision
	@role( event )
end

declare Demand
	@role( event )
end

declare Generate
	@role( event )
end

declare Allocate
	@role( event )
end

declare Appropriate
	@role( event )
end

declare JoinCluster
	@role( event )
end

declare LeaveCluster
	@role( event )
end

declare ProvisionPool
	cluster: Cluster @key
	quantity: double
end

declare MinimumPool
	cluster: Cluster @key
	quantity: double
end

declare AllocationPool
	cluster: Cluster @key
	quantity: double
end

declare MaximumPool
	cluster: Cluster @key
	quantity: double
end

declare Processed
	@role( event )
	act: Object @key
end

rule "Discard Rounds"
	salience 1000
	when
		$r : Round( $n : number )
		$r2 : Round( number < $n )
	then
		logger.info($r);
		retract( $r2 );
end

rule "Discard Rounds intermediate"
	salience 1000
	when
		$r : Round( $n : number, type == RoundType.APPROPRIATE )
		$r2 : Round( number == $n, type == RoundType.DEMAND )
	then
		logger.info($r);
		retract( $r2 );
end

rule "Init Provision Pool"
    salience 15
	when
		$c : Cluster( )
		not( ProvisionPool( cluster == $c ) )
	then
		insert(new ProvisionPool( $c, 0 ) );
end

rule "Init Minimum Pool"
    salience 15
	when
		$c : Cluster( )
		not( MinimumPool( cluster == $c ) )
	then
		insert(new MinimumPool( $c, 0 ) );
end

rule "Init Allocation Pool"
    salience 15
	when
		$c : Cluster( )
		not( AllocationPool( cluster == $c ) )
	then
		insert(new AllocationPool( $c, 0 ) );
end

rule "Init Maximum Pool"
    salience 15
	when
		$c : Cluster( )
		not( MaximumPool( cluster == $c ) )
	then
		insert(new MaximumPool( $c, 0 ) );
end

