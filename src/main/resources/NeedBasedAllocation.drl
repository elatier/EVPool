package uk.ac.imperial.evpool

import java.util.List
import java.util.ArrayList

import uk.ac.imperial.evpool.allocators.NeedBasedAllocator
import uk.ac.imperial.evpool.ProvisionPool
import uk.ac.imperial.evpool.actions.*
import uk.ac.imperial.evpool.facts.*
import uk.ac.imperial.evpool.RoundType

global org.apache.log4j.Logger logger
global org.drools.runtime.StatefulKnowledgeSession session

rule "Need based resource allocation"
	no-loop
	when
		$r : Round( type == RoundType.DEMAND, $t : number )
		$c : Cluster( allocationMethod == Allocation.NEED_BASED )
		$apool : AllocationPool( cluster == $c)
		$pool : ProvisionPool( cluster == $c )
		$mPool : MinimumPool( cluster == $c )
		$poolMembers : List(size >= 0) from accumulate( MemberOf( cluster == $c, $p : player ), collectList( $p ) )
	then
		logger.info("Need based order for resources in " + $c + " provision pool: " + $pool.getQuantity() + " min pool: " +$mPool.getQuantity());
        if (storage != null) {
            storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-allocPool",
                    $r.getNumber(),
                    Double.toString($pool.getQuantity())
                    );
            storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-agentCount",
                    $r.getNumber(),
                    Double.toString($poolMembers.size())
                    );
            storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-minPool",
                    $r.getNumber(),
                    Double.toString($mPool.getQuantity())
                    );
        }
        if ($mPool.getQuantity() > $pool.getQuantity()) {
            logger.info("Turn: "+ $t + " Using above allowance :" +($mPool.getQuantity()-$pool.getQuantity()));
            NeedBasedAllocator.allocate(session, $poolMembers, $mPool.getQuantity(), $t );
            modify( $apool ) {
            			setQuantity($mPool.getQuantity());
            		}
        }  else {
             NeedBasedAllocator.allocate(session, $poolMembers, $pool.getQuantity(), $t );
        }

		modify( $pool ) {
			setQuantity(0);
		}
		modify( $mPool ) {
        	setQuantity(0);
        }
end

