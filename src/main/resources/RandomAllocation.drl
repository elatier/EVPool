package uk.ac.imperial.evpool

import java.util.List
import java.util.ArrayList

import uk.ac.imperial.evpool.allocators.RandomAllocator
import uk.ac.imperial.evpool.ProvisionPool
import uk.ac.imperial.evpool.actions.*
import uk.ac.imperial.evpool.facts.*
import uk.ac.imperial.evpool.RoundType

global org.apache.log4j.Logger logger
global org.drools.runtime.StatefulKnowledgeSession session

rule "Random resource allocation"
	no-loop
	when
		$r : Round( type == RoundType.DEMAND, $t : number )
		$c : Cluster( allocationMethod == Allocation.RANDOM )
		$pool : ProvisionPool( cluster == $c )
		$poolMembers : List(size > 0) from accumulate( MemberOf( cluster == $c, $p : player ), collectList( $p ) )
	then
		logger.info("Random order for resources " + $c);
		RandomAllocator.allocate(session, $poolMembers, $pool.getQuantity(), $t );
    if (storage != null) {
    storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-intProvisionPool",
    $r.getNumber(),
    Double.toString($pool.getQuantity())
    );
    };
    if (storage != null) {
        storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-allocPool",
                $r.getNumber(),
                Double.toString($aPool.getQuantity())
                );
    }
    if (storage != null) {
        storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-minPool",
                $r.getNumber(),
                Double.toString($mPool.getQuantity())
                );
    };
    if (storage != null) {
        storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-extPool",
                $r.getNumber(),
                Double.toString(roundGridLoad+ePool*6*10)
                );
    };
    if (storage != null) {
        storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-headProvision",
                $r.getNumber(),
                Double.toString(headProvision)
                );
    };
		modify( $pool ) {
			setQuantity(0);
		}

end
