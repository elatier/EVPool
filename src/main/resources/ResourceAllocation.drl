package uk.ac.imperial.evpool

import java.util.List
import java.util.ArrayList

import uk.ac.imperial.evpool.allocators.*
import uk.ac.imperial.evpool.actions.*
import uk.ac.imperial.evpool.facts.*
import uk.ac.imperial.evpool.RoundType

global org.apache.log4j.Logger logger
global org.drools.runtime.StatefulKnowledgeSession session
global Map<Integer,Double> gridLoad
global Double maxChargePointRate
global Double loadLevel
global Double usageSteepness
global Boolean useMinimumPool

rule "Resource provision and allocation"
	no-loop
	when
		$r : Round( type == RoundType.DEMAND, $t : number )
		$c : Cluster( $alloc: allocationMethod )
		$aPool : AllocationPool( cluster == $c)
		$pool : ProvisionPool( cluster == $c )
		$mPool : MinimumPool( cluster == $c )
		$maxPool : MaximumPool( cluster == $c )
		$poolMembers : List(size >= 0) from
		    accumulate( MemberOf( cluster == $c, $p : player ), collectList( $p ) )
	then
        double roundGridLoad = (Double) gridLoad.get($t);
        double loadMax = (Double) gridLoad.get(-1);
        double loadMin = (Double) gridLoad.get(-2);
        double fractionOfMaxLoad =
            Math.pow((1.0 -((roundGridLoad - loadMin)/(loadMax-loadMin))),usageSteepness);

        Double ePool = 0.0; //external pool
		Double headProvision = $poolMembers.size() *
		    maxChargePointRate*loadLevel * fractionOfMaxLoad;

		if (headProvision > $maxPool.getQuantity()) {
		    headProvision =  $maxPool.getQuantity();
		};
		if (useMinimumPool) {
            if (headProvision < $mPool.getQuantity()) {
                headProvision =  $mPool.getQuantity();
            }
        };
        if (headProvision > $pool.getQuantity()) {
            ePool = headProvision - $pool.getQuantity();
        };
         logger.info("HeadProvision: "+headProvision+", Adding from outside grid:" +ePool);

        modify( $aPool ) {
            //allocation pool is made of provision and external pools
            setQuantity($pool.getQuantity()+ePool);
        };
        logger.info($alloc+" allocation " + $c + " using allocation pool: " + $aPool.getQuantity());

        if ($alloc == Allocation.NEED_BASED ) {
            NeedBasedAllocator.allocate(session, $poolMembers, $aPool.getQuantity(), $t );
        }  else if ($alloc == Allocation.RANDOM ) {
             RandomAllocator.allocate(session, $poolMembers, $aPool.getQuantity(), $t );
        } else if ($alloc == Allocation.RATION ) {
             RationAllocator.allocate(session, $poolMembers, $aPool.getQuantity(), $t );
        };
        if (storage != null) {
            storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-intProvisionPool",
                    $t,Double.toString($pool.getQuantity()));
            storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-allocPool",
                    $t, Double.toString($aPool.getQuantity()));
            storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-minPool",
                    $t,Double.toString($mPool.getQuantity()));
            storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-extPool",
                    $t,Double.toString(ePool));
            storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-headProvision",
                    $t,Double.toString(headProvision));
        };
		modify( $pool ) {
			setQuantity(0);
		}
		modify( $mPool ) {
        	setQuantity(0);
        }
        modify( $maxPool ) {
            setQuantity(0);
        }
end
